/// <reference types="node" />
import https from 'https';
import { HttpClient as CoreHttpClient, HttpRequest, HttpResponse } from '@amplitude/experiment-core';
import { SimpleResponse, HttpClient } from '../types/transport';
export declare class FetchHttpClient implements HttpClient {
    private readonly httpAgent;
    constructor(httpAgent: https.Agent);
    /**
     * Wraps the http and https libraries in a fetch()-like interface
     * @param requestUrl
     * @param method HTTP Method (GET, POST, etc.)
     * @param headers HTTP Headers
     * @param  Request body
     */
    request(requestUrl: string, method: string, headers: Record<string, string>, body: string, timeoutMillis?: number): Promise<SimpleResponse>;
}
/**
 * Wrap the exposed HttpClient in a CoreClient implementation to work with
 * FlagApi and EvaluationApi.
 */
export declare class WrapperClient implements CoreHttpClient {
    private readonly client;
    constructor(client: HttpClient);
    request(request: HttpRequest): Promise<HttpResponse>;
}
