"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Executor = exports.Semaphore = exports.Mutex = void 0;
class Mutex {
    constructor() {
        this._locking = Promise.resolve();
    }
    lock() {
        let unlockNext;
        const willLock = new Promise((resolve) => (unlockNext = resolve));
        const willUnlock = this._locking.then(() => unlockNext);
        this._locking = this._locking.then(() => willLock);
        return willUnlock;
    }
}
exports.Mutex = Mutex;
class Semaphore {
    constructor(limit) {
        this.queue = [];
        this.running = 0;
        this.limit = limit;
    }
    get() {
        let willResolve;
        const promise = new Promise((resolve) => {
            willResolve = resolve;
        });
        this.queue.push({ willResolve });
        this.tryRunNext();
        return promise;
    }
    tryRunNext() {
        if (this.running >= this.limit || this.queue.length == 0) {
            return;
        }
        this.running++;
        const { willResolve } = this.queue.shift();
        willResolve(() => {
            this.running--;
            this.tryRunNext();
        });
    }
}
exports.Semaphore = Semaphore;
class Executor {
    constructor(limit) {
        this.semaphore = new Semaphore(limit);
    }
    run(task) {
        return __awaiter(this, void 0, void 0, function* () {
            const unlock = yield this.semaphore.get();
            try {
                return yield task();
            }
            finally {
                unlock();
            }
        });
    }
}
exports.Executor = Executor;
