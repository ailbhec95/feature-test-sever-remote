export declare class Mutex {
    _locking: any;
    constructor();
    lock(): Promise<() => void>;
}
export declare class Semaphore {
    readonly limit: number;
    private queue;
    private running;
    constructor(limit: number);
    get(): Promise<() => void>;
    private tryRunNext;
}
export declare class Executor {
    private readonly semaphore;
    constructor(limit: number);
    run<T>(task: () => Promise<T>): Promise<T>;
}
