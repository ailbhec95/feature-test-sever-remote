"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertUserToEvaluationContext = void 0;
const convertUserToEvaluationContext = (user) => {
    var _a, _b;
    if (!user) {
        return {};
    }
    const userGroups = user.groups;
    const userGroupProperties = user.group_properties;
    const userGroupCohortIds = user.group_cohort_ids;
    const context = {};
    user = Object.assign({}, user);
    delete user['groups'];
    delete user['group_properties'];
    delete user['group_cohort_ids'];
    if (Object.keys(user).length > 0) {
        context['user'] = user;
    }
    const groups = {};
    if (!userGroups) {
        return context;
    }
    for (const groupType of Object.keys(userGroups)) {
        const groupNames = userGroups[groupType];
        if (groupNames.length > 0 && groupNames[0]) {
            const groupName = groupNames[0];
            const groupNameMap = {
                group_name: groupName,
            };
            // Check for group properties
            const groupProperties = (_a = userGroupProperties === null || userGroupProperties === void 0 ? void 0 : userGroupProperties[groupType]) === null || _a === void 0 ? void 0 : _a[groupName];
            if (groupProperties && Object.keys(groupProperties).length > 0) {
                groupNameMap['group_properties'] = groupProperties;
            }
            // Check for group cohort ids.
            const groupCohortIds = (_b = userGroupCohortIds === null || userGroupCohortIds === void 0 ? void 0 : userGroupCohortIds[groupType]) === null || _b === void 0 ? void 0 : _b[groupName];
            if (groupCohortIds && Object.keys(groupCohortIds).length > 0) {
                groupNameMap['cohort_ids'] = groupCohortIds;
            }
            groups[groupType] = groupNameMap;
        }
    }
    if (Object.keys(groups).length > 0) {
        context['groups'] = groups;
    }
    return context;
};
exports.convertUserToEvaluationContext = convertUserToEvaluationContext;
