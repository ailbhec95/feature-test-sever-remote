"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.populateLocalConfigDefaults = exports.populateRemoteConfigDefaults = void 0;
const __1 = require("..");
const config_1 = require("../types/config");
const populateRemoteConfigDefaults = (customConfig) => {
    const config = Object.assign(Object.assign({}, __1.RemoteEvaluationDefaults), customConfig);
    const isEu = config.serverZone.toLowerCase() === config_1.EU_SERVER_URLS.name;
    config.serverZone = isEu ? 'eu' : 'us';
    if (!(customConfig === null || customConfig === void 0 ? void 0 : customConfig.serverUrl)) {
        config.serverUrl = isEu
            ? config_1.EU_SERVER_URLS.remote
            : __1.RemoteEvaluationDefaults.serverUrl;
    }
    return config;
};
exports.populateRemoteConfigDefaults = populateRemoteConfigDefaults;
const populateLocalConfigDefaults = (customConfig) => {
    const config = Object.assign(Object.assign({}, config_1.LocalEvaluationDefaults), customConfig);
    const isEu = config.serverZone.toLowerCase() === config_1.EU_SERVER_URLS.name;
    config.serverZone = isEu ? 'eu' : 'us';
    if (!(customConfig === null || customConfig === void 0 ? void 0 : customConfig.serverUrl)) {
        config.serverUrl = isEu
            ? config_1.EU_SERVER_URLS.flags
            : config_1.LocalEvaluationDefaults.serverUrl;
    }
    if (!(customConfig === null || customConfig === void 0 ? void 0 : customConfig.streamServerUrl)) {
        config.streamServerUrl = isEu
            ? config_1.EU_SERVER_URLS.stream
            : config_1.LocalEvaluationDefaults.streamServerUrl;
    }
    if ((customConfig === null || customConfig === void 0 ? void 0 : customConfig.cohortSyncConfig) &&
        !(customConfig === null || customConfig === void 0 ? void 0 : customConfig.cohortSyncConfig.cohortServerUrl)) {
        config.cohortSyncConfig.cohortServerUrl = isEu
            ? config_1.EU_SERVER_URLS.cohort
            : config_1.CohortSyncConfigDefaults.cohortServerUrl;
    }
    return config;
};
exports.populateLocalConfigDefaults = populateLocalConfigDefaults;
