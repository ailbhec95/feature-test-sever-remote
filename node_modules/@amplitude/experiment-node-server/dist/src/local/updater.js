"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlagConfigUpdaterBase = void 0;
const cohort_1 = require("../util/cohort");
const logger_1 = require("../util/logger");
class FlagConfigUpdaterBase {
    constructor(cache, cohortStorage, cohortFetcher, debug = false) {
        this.cache = cache;
        this.cohortFetcher = cohortFetcher;
        this.cohortStorage = cohortStorage;
        this.logger = new logger_1.ConsoleLogger(debug);
    }
    _update(flagConfigs, onChange) {
        return __awaiter(this, void 0, void 0, function* () {
            let changed = false;
            if (onChange) {
                const current = yield this.cache.getAll();
                if (!Object.is(current, flagConfigs)) {
                    changed = true;
                }
            }
            // Get all cohort needs update.
            const cohortIds = cohort_1.CohortUtils.extractCohortIds(flagConfigs);
            if (cohortIds && cohortIds.size > 0 && !this.cohortFetcher) {
                this.logger.error('Cohorts found in flag configs but no cohort download configured');
            }
            else {
                // Download new cohorts into cohortStorage.
                yield this.downloadNewCohorts(cohortIds);
            }
            // Update the flags with new flags.
            yield this.cache.clear();
            yield this.cache.putAll(flagConfigs);
            // Remove cohorts not used by new flags.
            yield this.removeUnusedCohorts(cohortIds);
            if (changed) {
                yield onChange(this.cache);
            }
        });
    }
    downloadNewCohorts(cohortIds) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const oldCohortIds = (_a = this.cohortStorage) === null || _a === void 0 ? void 0 : _a.getAllCohortIds();
            const newCohortIds = cohort_1.CohortUtils.setSubtract(cohortIds, oldCohortIds);
            const failedCohortIds = new Set();
            const cohortDownloadPromises = [...newCohortIds].map((cohortId) => {
                var _a;
                return (_a = this.cohortFetcher) === null || _a === void 0 ? void 0 : _a.fetch(cohortId).then((cohort) => {
                    if (cohort) {
                        this.cohortStorage.put(cohort);
                    }
                }).catch((err) => {
                    this.logger.error(`[Experiment] Cohort download failed ${cohortId}`, err);
                    failedCohortIds.add(cohortId);
                });
            });
            yield Promise.all(cohortDownloadPromises);
            return failedCohortIds;
        });
    }
    removeUnusedCohorts(validCohortIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const cohortIdsToBeRemoved = cohort_1.CohortUtils.setSubtract(this.cohortStorage.getAllCohortIds(), validCohortIds);
            cohortIdsToBeRemoved.forEach((id) => {
                this.cohortStorage.delete(id);
            });
        });
    }
}
exports.FlagConfigUpdaterBase = FlagConfigUpdaterBase;
