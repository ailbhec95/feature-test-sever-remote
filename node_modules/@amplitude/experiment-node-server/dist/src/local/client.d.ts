import { EvaluationFlag } from '@amplitude/experiment-core';
import { StreamEventSourceFactory } from '../transport/stream';
import { LocalEvaluationConfig } from '../types/config';
import { FlagConfigCache } from '../types/flag';
import { HttpClient } from '../types/transport';
import { ExperimentUser } from '../types/user';
import { Variant, Variants } from '../types/variant';
import { InMemoryFlagConfigCache } from './cache';
import { InMemoryCohortStorage } from './cohort/storage';
/**
 * Experiment client for evaluating variants for a user locally.
 * @category Core Usage
 */
export declare class LocalEvaluationClient {
    private readonly logger;
    protected readonly config: LocalEvaluationConfig;
    private readonly updater;
    private readonly assignmentService;
    private readonly evaluation;
    private readonly cohortUpdater?;
    /**
     * Directly access the client's flag config cache.
     *
     * Used for directly manipulating the flag configs used for evaluation.
     */
    readonly cache: InMemoryFlagConfigCache;
    readonly cohortStorage: InMemoryCohortStorage;
    constructor(apiKey: string, config?: LocalEvaluationConfig, flagConfigCache?: FlagConfigCache, httpClient?: HttpClient, streamEventSourceFactory?: StreamEventSourceFactory);
    private createAssignmentService;
    /**
     * Locally evaluate varints for a user.
     *
     * This function will only evaluate flags for the keys specified in the
     * {@link flagKeys} argument. If {@link flagKeys} is missing, all flags in the
     * {@link FlagConfigCache} will be evaluated.
     *
     * Unlike {@link evaluate}, this function returns a default variant object
     * if the flag or experiment was evaluated, but the user was not assigned a
     * variant (i.e. 'off').
     *
     * @param user The user to evaluate
     * @param flagKeys The flags to evaluate with the user. If empty, all flags
     * from the flag cache are evaluated.
     * @returns The evaluated variants
     */
    evaluateV2(user: ExperimentUser, flagKeys?: string[]): Record<string, Variant>;
    protected checkFlagsCohortsAvailable(cohortIdsByFlag: Record<string, Set<string>>): boolean;
    protected enrichUserWithCohorts(user: ExperimentUser, flags: Record<string, EvaluationFlag>): void;
    /**
     * Locally evaluates flag variants for a user.
     *
     * This function will only evaluate flags for the keys specified in the
     * {@link flagKeys} argument. If {@link flagKeys} is missing, all flags in the
     * {@link FlagConfigCache} will be evaluated.
     *
     * @param user The user to evaluate
     * @param flagKeys The flags to evaluate with the user. If empty, all flags
     * from the flag cache are evaluated.
     * @returns The evaluated variants
     * @deprecated use evaluateV2 instead
     */
    evaluate(user: ExperimentUser, flagKeys?: string[]): Promise<Variants>;
    /**
     * Fetch initial flag configurations and start polling for updates.
     *
     * You must call this function to begin polling for flag config updates.
     * The promise returned by this function is resolved when the initial call
     * to fetch the flag configuration completes.
     *
     * Calling this function while the poller is already running does nothing.
     */
    start(): Promise<void>;
    /**
     * Stop polling for flag configurations.
     *
     * Calling this function while the poller is not running will do nothing.
     */
    stop(): void;
}
