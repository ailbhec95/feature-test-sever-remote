import { HttpClient } from '@amplitude/experiment-core';
import { Cohort } from '../../types/cohort';
export type GetCohortOptions = {
    libraryName: string;
    libraryVersion: string;
    cohortId: string;
    maxCohortSize: number;
    lastModified?: number;
    timeoutMillis?: number;
};
export interface CohortApi {
    /**
     * Calls /sdk/v1/cohort/<cohortId> with query params maxCohortSize and lastModified if specified.
     * Returns a promise that
     *    resolves to a
     *        Cohort if the cohort downloads successfully or
     *        undefined if cohort has no change since lastModified timestamp and
     *    throws an error if download failed.
     * @param options
     */
    getCohort(options?: GetCohortOptions): Promise<Cohort>;
}
export declare class CohortClientRequestError extends Error {
}
export declare class CohortMaxSizeExceededError extends CohortClientRequestError {
}
export declare class CohortDownloadError extends Error {
}
export declare class SdkCohortApi implements CohortApi {
    private readonly cohortApiKey;
    private readonly serverUrl;
    private readonly httpClient;
    constructor(cohortApiKey: string, serverUrl: string, httpClient: HttpClient);
    getCohort(options?: GetCohortOptions): Promise<Cohort | undefined>;
}
