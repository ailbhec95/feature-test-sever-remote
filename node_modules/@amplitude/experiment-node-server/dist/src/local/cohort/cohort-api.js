"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkCohortApi = exports.CohortDownloadError = exports.CohortMaxSizeExceededError = exports.CohortClientRequestError = void 0;
class CohortClientRequestError extends Error {
} // 4xx errors except 429
exports.CohortClientRequestError = CohortClientRequestError;
class CohortMaxSizeExceededError extends CohortClientRequestError {
} // 413 error
exports.CohortMaxSizeExceededError = CohortMaxSizeExceededError;
class CohortDownloadError extends Error {
} // All other errors
exports.CohortDownloadError = CohortDownloadError;
class SdkCohortApi {
    constructor(cohortApiKey, serverUrl, httpClient) {
        this.cohortApiKey = cohortApiKey;
        this.serverUrl = serverUrl;
        this.httpClient = httpClient;
    }
    getCohort(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {
                Authorization: `Basic ${this.cohortApiKey}`,
            };
            if ((options === null || options === void 0 ? void 0 : options.libraryName) && (options === null || options === void 0 ? void 0 : options.libraryVersion)) {
                headers['X-Amp-Exp-Library'] = `${options.libraryName}/${options.libraryVersion}`;
            }
            const reqUrl = `${this.serverUrl}/sdk/v1/cohort/${options.cohortId}?maxCohortSize=${options.maxCohortSize}${options.lastModified ? `&lastModified=${options.lastModified}` : ''}`;
            const response = yield this.httpClient.request({
                requestUrl: reqUrl,
                method: 'GET',
                headers: headers,
                timeoutMillis: options === null || options === void 0 ? void 0 : options.timeoutMillis,
            });
            // Check status code.
            // 200: download success.
            // 204: no change.
            // 413: cohort larger than maxCohortSize
            if (response.status == 200) {
                const cohort = JSON.parse(response.body);
                if (Array.isArray(cohort.memberIds)) {
                    cohort.memberIds = new Set(cohort.memberIds);
                }
                return cohort;
            }
            else if (response.status == 204) {
                return undefined;
            }
            else if (response.status == 413) {
                throw new CohortMaxSizeExceededError(`Cohort size > ${options.maxCohortSize}`);
            }
            else if (400 <= response.status &&
                response.status < 500 &&
                response.status != 429) {
                // Any 4xx other than 429.
                throw new CohortClientRequestError(`Cohort client error response status ${response.status}, body ${response.body}`);
            }
            else {
                throw new CohortDownloadError(`Cohort error response status ${response.status}, body ${response.body}`);
            }
        });
    }
}
exports.SdkCohortApi = SdkCohortApi;
