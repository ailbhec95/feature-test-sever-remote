import { CohortStorage } from '../../types/cohort';
import { FlagConfigCache } from '../../types/flag';
import { CohortFetcher } from './fetcher';
import { CohortUpdater } from './updater';
export declare class CohortPoller implements CohortUpdater {
    private readonly logger;
    readonly fetcher: CohortFetcher;
    readonly storage: CohortStorage;
    readonly flagCache: FlagConfigCache;
    private poller;
    private pollingIntervalMillis;
    constructor(fetcher: CohortFetcher, storage: CohortStorage, flagCache: FlagConfigCache, pollingIntervalMillis?: number, debug?: boolean);
    /**
     * You must call this function to begin polling for cohort updates.
     *
     * Calling this function while the poller is already running does nothing.
     */
    start(onChange?: (storage: CohortStorage) => Promise<void>): Promise<void>;
    /**
     * Stop polling for cohorts.
     *
     * Calling this function while the poller is not running will do nothing.
     */
    stop(): void;
    update(onChange?: (storage: CohortStorage) => Promise<void>): Promise<void>;
}
