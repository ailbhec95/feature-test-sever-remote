"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalEvaluationClient = void 0;
const amplitude = __importStar(require("@amplitude/analytics-node"));
const experiment_core_1 = require("@amplitude/experiment-core");
const eventsource_1 = __importDefault(require("eventsource"));
const assignment_1 = require("../assignment/assignment");
const assignment_filter_1 = require("../assignment/assignment-filter");
const assignment_service_1 = require("../assignment/assignment-service");
const http_1 = require("../transport/http");
const cohort_1 = require("../types/cohort");
const config_1 = require("../types/config");
const cohort_2 = require("../util/cohort");
const config_2 = require("../util/config");
const logger_1 = require("../util/logger");
const user_1 = require("../util/user");
const variant_1 = require("../util/variant");
const cache_1 = require("./cache");
const fetcher_1 = require("./cohort/fetcher");
const poller_1 = require("./cohort/poller");
const storage_1 = require("./cohort/storage");
const fetcher_2 = require("./fetcher");
const poller_2 = require("./poller");
const streamer_1 = require("./streamer");
const STREAM_RETRY_DELAY_MILLIS = 15000; // The base delay to retry stream after fallback to poller.
const STREAM_RETRY_JITTER_MAX_MILLIS = 2000; // The jitter to add to delay after fallbacked to poller.
const STREAM_ATTEMPTS = 1; // Number of attempts before fallback to poller.
const STREAM_TRY_DELAY_MILLIS = 1000; // The delay between attempts.
const COHORT_POLLING_INTERVAL_MILLIS_MIN = 60000;
/**
 * Experiment client for evaluating variants for a user locally.
 * @category Core Usage
 */
class LocalEvaluationClient {
    constructor(apiKey, config, flagConfigCache, httpClient = new http_1.FetchHttpClient(config === null || config === void 0 ? void 0 : config.httpAgent), streamEventSourceFactory = (url, params) => new eventsource_1.default(url, params)) {
        var _a, _b, _c;
        this.config = (0, config_2.populateLocalConfigDefaults)(config);
        const fetcher = new fetcher_2.FlagConfigFetcher(apiKey, httpClient, this.config.serverUrl, this.config.debug);
        this.cache = new cache_1.InMemoryFlagConfigCache(flagConfigCache, this.config.bootstrap);
        this.logger = new logger_1.ConsoleLogger(this.config.debug);
        this.cohortStorage = new storage_1.InMemoryCohortStorage();
        let cohortFetcher = undefined;
        if (this.config.cohortSyncConfig) {
            cohortFetcher = new fetcher_1.CohortFetcher(this.config.cohortSyncConfig.apiKey, this.config.cohortSyncConfig.secretKey, httpClient, (_a = this.config.cohortSyncConfig) === null || _a === void 0 ? void 0 : _a.cohortServerUrl, (_b = this.config.cohortSyncConfig) === null || _b === void 0 ? void 0 : _b.maxCohortSize, undefined, this.config.debug);
            this.cohortUpdater = new poller_1.CohortPoller(cohortFetcher, this.cohortStorage, this.cache, Math.max(COHORT_POLLING_INTERVAL_MILLIS_MIN, (_c = this.config.cohortSyncConfig) === null || _c === void 0 ? void 0 : _c.cohortPollingIntervalMillis), this.config.debug);
        }
        const flagsPoller = new poller_2.FlagConfigPoller(fetcher, this.cache, this.cohortStorage, cohortFetcher, this.config.flagConfigPollingIntervalMillis, this.config.debug);
        this.updater = this.config.streamUpdates
            ? new streamer_1.FlagConfigStreamer(apiKey, flagsPoller, this.cache, streamEventSourceFactory, this.config.streamFlagConnTimeoutMillis, STREAM_ATTEMPTS, STREAM_TRY_DELAY_MILLIS, STREAM_RETRY_DELAY_MILLIS +
                Math.floor(Math.random() * STREAM_RETRY_JITTER_MAX_MILLIS), this.config.streamServerUrl, this.cohortStorage, cohortFetcher, this.config.debug)
            : flagsPoller;
        if (this.config.assignmentConfig) {
            this.config.assignmentConfig = Object.assign(Object.assign({}, config_1.AssignmentConfigDefaults), this.config.assignmentConfig);
            this.assignmentService = this.createAssignmentService(this.config.assignmentConfig);
        }
        this.evaluation = new experiment_core_1.EvaluationEngine();
    }
    createAssignmentService(assignmentConfig) {
        const instance = amplitude.createInstance();
        const { apiKey, cacheCapacity } = assignmentConfig, ampConfig = __rest(assignmentConfig, ["apiKey", "cacheCapacity"]);
        instance.init(apiKey, ampConfig);
        return new assignment_service_1.AmplitudeAssignmentService(instance, new assignment_filter_1.InMemoryAssignmentFilter(cacheCapacity));
    }
    /**
     * Locally evaluate varints for a user.
     *
     * This function will only evaluate flags for the keys specified in the
     * {@link flagKeys} argument. If {@link flagKeys} is missing, all flags in the
     * {@link FlagConfigCache} will be evaluated.
     *
     * Unlike {@link evaluate}, this function returns a default variant object
     * if the flag or experiment was evaluated, but the user was not assigned a
     * variant (i.e. 'off').
     *
     * @param user The user to evaluate
     * @param flagKeys The flags to evaluate with the user. If empty, all flags
     * from the flag cache are evaluated.
     * @returns The evaluated variants
     */
    evaluateV2(user, flagKeys) {
        var _a;
        const flags = this.cache.getAllCached();
        this.enrichUserWithCohorts(user, flags);
        this.logger.debug('[Experiment] evaluate - user:', user, 'flags:', flags);
        const context = (0, user_1.convertUserToEvaluationContext)(user);
        const sortedFlags = (0, experiment_core_1.topologicalSort)(flags, flagKeys);
        const results = this.evaluation.evaluate(context, sortedFlags);
        void ((_a = this.assignmentService) === null || _a === void 0 ? void 0 : _a.track(new assignment_1.Assignment(user, results)));
        this.logger.debug('[Experiment] evaluate - variants: ', results);
        return (0, variant_1.evaluationVariantsToVariants)(results);
    }
    checkFlagsCohortsAvailable(cohortIdsByFlag) {
        const availableCohortIds = this.cohortStorage.getAllCohortIds();
        for (const key in cohortIdsByFlag) {
            const flagCohortIds = cohortIdsByFlag[key];
            const unavailableCohortIds = cohort_2.CohortUtils.setSubtract(flagCohortIds, availableCohortIds);
            if (unavailableCohortIds.size > 0) {
                this.logger.error(`[Experiment] Flag ${key} has cohort ids ${[
                    ...unavailableCohortIds,
                ]} unavailable, evaluation may be incorrect`);
                return false;
            }
        }
        return true;
    }
    enrichUserWithCohorts(user, flags) {
        const cohortIdsByFlag = {};
        const cohortIdsByGroup = {};
        for (const key in flags) {
            const cohortIdsByGroupOfFlag = cohort_2.CohortUtils.extractCohortIdsByGroupFromFlag(flags[key]);
            cohort_2.CohortUtils.mergeValuesOfBIntoValuesOfA(cohortIdsByGroup, cohortIdsByGroupOfFlag);
            cohortIdsByFlag[key] = cohort_2.CohortUtils.mergeAllValues(cohortIdsByGroupOfFlag);
        }
        this.checkFlagsCohortsAvailable(cohortIdsByFlag);
        // Enrich cohorts with user group type.
        const userCohortIds = cohortIdsByGroup[cohort_1.USER_GROUP_TYPE];
        if (user.user_id && userCohortIds && userCohortIds.size != 0) {
            user.cohort_ids = Array.from(this.cohortStorage.getCohortsForUser(user.user_id, userCohortIds));
        }
        // Enrich other group types for this user.
        if (user.groups) {
            for (const groupType in user.groups) {
                const groupNames = user.groups[groupType];
                if (groupNames.length == 0) {
                    continue;
                }
                const groupName = groupNames[0];
                const cohortIds = cohortIdsByGroup[groupType];
                if (!cohortIds || cohortIds.size == 0) {
                    continue;
                }
                if (!user.group_cohort_ids) {
                    user.group_cohort_ids = {};
                }
                if (!(groupType in user.group_cohort_ids)) {
                    user.group_cohort_ids[groupType] = {};
                }
                user.group_cohort_ids[groupType][groupName] = Array.from(this.cohortStorage.getCohortsForGroup(groupType, groupName, cohortIds));
            }
        }
    }
    /**
     * Locally evaluates flag variants for a user.
     *
     * This function will only evaluate flags for the keys specified in the
     * {@link flagKeys} argument. If {@link flagKeys} is missing, all flags in the
     * {@link FlagConfigCache} will be evaluated.
     *
     * @param user The user to evaluate
     * @param flagKeys The flags to evaluate with the user. If empty, all flags
     * from the flag cache are evaluated.
     * @returns The evaluated variants
     * @deprecated use evaluateV2 instead
     */
    evaluate(user, flagKeys) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = this.evaluateV2(user, flagKeys);
            return (0, variant_1.filterDefaultVariants)(results);
        });
    }
    /**
     * Fetch initial flag configurations and start polling for updates.
     *
     * You must call this function to begin polling for flag config updates.
     * The promise returned by this function is resolved when the initial call
     * to fetch the flag configuration completes.
     *
     * Calling this function while the poller is already running does nothing.
     */
    start() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updater.start();
            yield ((_a = this.cohortUpdater) === null || _a === void 0 ? void 0 : _a.start());
        });
    }
    /**
     * Stop polling for flag configurations.
     *
     * Calling this function while the poller is not running will do nothing.
     */
    stop() {
        var _a;
        this.updater.stop();
        (_a = this.cohortUpdater) === null || _a === void 0 ? void 0 : _a.stop();
    }
}
exports.LocalEvaluationClient = LocalEvaluationClient;
