import { CohortStorage } from '../types/cohort';
import { FlagConfigCache } from '../types/flag';
import { CohortFetcher } from './cohort/fetcher';
import { FlagConfigFetcher } from './fetcher';
import { FlagConfigUpdater, FlagConfigUpdaterBase } from './updater';
export declare class FlagConfigPoller extends FlagConfigUpdaterBase implements FlagConfigUpdater {
    private readonly pollingIntervalMillis;
    private poller;
    readonly fetcher: FlagConfigFetcher;
    constructor(fetcher: FlagConfigFetcher, cache: FlagConfigCache, cohortStorage: CohortStorage, cohortFetcher?: CohortFetcher, pollingIntervalMillis?: number, debug?: boolean);
    /**
     * Fetch initial flag configurations and start polling for updates.
     *
     * You must call this function to begin polling for flag config updates.
     * The promise returned by this function is resolved when the initial call
     * to fetch the flag configuration completes.
     *
     * Calling this function while the poller is already running does nothing.
     */
    start(onChange?: (cache: FlagConfigCache) => Promise<void>): Promise<void>;
    /**
     * Stop polling for flag configurations.
     *
     * Calling this function while the poller is not running will do nothing.
     */
    stop(): void;
    update(onChange?: (cache: FlagConfigCache) => Promise<void>): Promise<void>;
}
