"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlagConfigPoller = void 0;
const config_1 = require("../types/config");
const backoff_1 = require("../util/backoff");
const updater_1 = require("./updater");
const BACKOFF_POLICY = {
    attempts: 5,
    min: 1,
    max: 1,
    scalar: 1,
};
class FlagConfigPoller extends updater_1.FlagConfigUpdaterBase {
    constructor(fetcher, cache, cohortStorage, cohortFetcher, pollingIntervalMillis = config_1.LocalEvaluationDefaults.flagConfigPollingIntervalMillis, debug = false) {
        super(cache, cohortStorage, cohortFetcher, debug);
        this.fetcher = fetcher;
        this.pollingIntervalMillis = pollingIntervalMillis;
    }
    /**
     * Fetch initial flag configurations and start polling for updates.
     *
     * You must call this function to begin polling for flag config updates.
     * The promise returned by this function is resolved when the initial call
     * to fetch the flag configuration completes.
     *
     * Calling this function while the poller is already running does nothing.
     */
    start(onChange) {
        const _super = Object.create(null, {
            _update: { get: () => super._update }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.poller) {
                this.logger.debug('[Experiment] poller - start');
                this.poller = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield this.update(onChange);
                    }
                    catch (e) {
                        this.logger.debug('[Experiment] flag config update failed', e);
                    }
                }), this.pollingIntervalMillis);
                // Fetch initial flag configs and await the result.
                try {
                    const flagConfigs = yield (0, backoff_1.doWithBackoffFailLoudly)(() => __awaiter(this, void 0, void 0, function* () { return yield this.fetcher.fetch(); }), BACKOFF_POLICY);
                    yield _super._update.call(this, flagConfigs, onChange);
                }
                catch (e) {
                    this.logger.error('[Experiment] flag config initial poll failed, stopping', e);
                    this.stop();
                    throw e;
                }
            }
        });
    }
    /**
     * Stop polling for flag configurations.
     *
     * Calling this function while the poller is not running will do nothing.
     */
    stop() {
        if (this.poller) {
            this.logger.debug('[Experiment] poller - stop');
            clearTimeout(this.poller);
            this.poller = undefined;
        }
    }
    update(onChange) {
        const _super = Object.create(null, {
            _update: { get: () => super._update }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug('[Experiment] updating flag configs');
            const flagConfigs = yield this.fetcher.fetch();
            yield _super._update.call(this, flagConfigs, onChange);
        });
    }
}
exports.FlagConfigPoller = FlagConfigPoller;
